import jsPDF from 'jspdf';

interface PDFExportOptions {
  appointments: Array<{
    id: string;
    clientName: string;
    type: string;
    startTime: string;
    endTime: string;
    status: string;
    notes?: string;
    attendees?: string;
  }>;
  weekStart: Date;
  therapistName: string;
}

export async function exportToPDF(options: PDFExportOptions): Promise<void> {
  const { appointments, weekStart, therapistName } = options;
  
  // Create new PDF document optimized for reMarkable Paper Pro (A4 size)
  const doc = new jsPDF();
  
  // Set font
  doc.setFont('helvetica');
  
  // Header
  doc.setFontSize(16);
  doc.text('Practice Intelligence - Weekly Schedule', 20, 20);
  
  doc.setFontSize(12);
  doc.text(`${therapistName}`, 20, 30);
  
  // Week range
  const weekEnd = new Date(weekStart);
  weekEnd.setDate(weekStart.getDate() + 6);
  
  const weekRange = `${weekStart.toLocaleDateString('en-US', { 
    month: 'short', 
    day: 'numeric',
    year: 'numeric'
  })} - ${weekEnd.toLocaleDateString('en-US', { 
    month: 'short', 
    day: 'numeric',
    year: 'numeric'
  })}`;
  
  doc.text(`Week of ${weekRange}`, 20, 40);
  
  // Line separator
  doc.setLineWidth(0.5);
  doc.line(20, 45, 190, 45);
  
  let yPosition = 55;
  
  if (appointments.length === 0) {
    doc.setFontSize(11);
    doc.text('No appointments scheduled for this week.', 20, yPosition);
  } else {
    // Group appointments by day
    const appointmentsByDay = appointments.reduce((acc, appointment) => {
      const date = new Date(appointment.startTime);
      const dayKey = date.toDateString();
      if (!acc[dayKey]) {
        acc[dayKey] = [];
      }
      acc[dayKey].push(appointment);
      return acc;
    }, {} as Record<string, typeof appointments>);
    
    // Sort days chronologically
    const sortedDays = Object.keys(appointmentsByDay).sort((a, b) => 
      new Date(a).getTime() - new Date(b).getTime()
    );
    
    for (const dayKey of sortedDays) {
      const dayAppointments = appointmentsByDay[dayKey];
      const date = new Date(dayKey);
      
      // Day header
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.text(date.toLocaleDateString('en-US', { 
        weekday: 'long', 
        month: 'long', 
        day: 'numeric' 
      }), 20, yPosition);
      
      yPosition += 8;
      
      // Sort appointments by time
      dayAppointments.sort((a, b) => 
        new Date(a.startTime).getTime() - new Date(b.startTime).getTime()
      );
      
      for (const appointment of dayAppointments) {
        const startTime = new Date(appointment.startTime);
        const endTime = new Date(appointment.endTime);
        const timeString = `${startTime.toLocaleTimeString('en-US', { 
          hour: '2-digit', 
          minute: '2-digit',
          hour12: false 
        })} - ${endTime.toLocaleTimeString('en-US', { 
          hour: '2-digit', 
          minute: '2-digit',
          hour12: false 
        })}`;
        
        doc.setFont('helvetica', 'normal');
        doc.setFontSize(11);
        
        // Time
        doc.text(timeString, 25, yPosition);
        
        // Client/Event name
        doc.setFont('helvetica', 'bold');
        doc.text(appointment.clientName, 70, yPosition);
        
        // Type
        doc.setFont('helvetica', 'normal');
        doc.text(`(${appointment.type})`, 130, yPosition);
        
        yPosition += 5;
        
        // Notes if available
        if (appointment.notes) {
          doc.setFontSize(9);
          doc.setFont('helvetica', 'italic');
          const splitNotes = doc.splitTextToSize(appointment.notes, 160);
          doc.text(splitNotes, 25, yPosition);
          yPosition += splitNotes.length * 3;
        }
        
        // Attendees if available
        if (appointment.attendees) {
          doc.setFontSize(9);
          doc.setFont('helvetica', 'normal');
          doc.text(`Attendees: ${appointment.attendees}`, 25, yPosition);
          yPosition += 3;
        }
        
        yPosition += 3;
        
        // Check if we need a new page
        if (yPosition > 270) {
          doc.addPage();
          yPosition = 20;
        }
      }
      
      yPosition += 8;
    }
  }
  
  // Footer
  const pageCount = doc.internal.pages.length - 1;
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setFont('helvetica', 'normal');
    doc.text(`Generated by Practice Intelligence - ${new Date().toLocaleString()}`, 20, 285);
    doc.text(`Page ${i} of ${pageCount}`, 170, 285);
  }
  
  // Save the PDF
  const fileName = `schedule_${weekStart.getFullYear()}_${(weekStart.getMonth() + 1).toString().padStart(2, '0')}_${weekStart.getDate().toString().padStart(2, '0')}.pdf`;
  doc.save(fileName);
}

// Export function for daily schedule
export async function exportDailyToPDF(options: {
  appointments: PDFExportOptions['appointments'];
  date: Date;
  therapistName: string;
}): Promise<void> {
  const { appointments, date, therapistName } = options;
  
  const doc = new jsPDF();
  doc.setFont('helvetica');
  
  // Header
  doc.setFontSize(16);
  doc.text('Practice Intelligence - Daily Schedule', 20, 20);
  
  doc.setFontSize(12);
  doc.text(`${therapistName}`, 20, 30);
  doc.text(date.toLocaleDateString('en-US', { 
    weekday: 'long', 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric' 
  }), 20, 40);
  
  // Line separator
  doc.setLineWidth(0.5);
  doc.line(20, 45, 190, 45);
  
  let yPosition = 55;
  
  // Filter appointments for the selected date
  const dayAppointments = appointments.filter(appointment => {
    const appointmentDate = new Date(appointment.startTime);
    return appointmentDate.toDateString() === date.toDateString();
  });
  
  if (dayAppointments.length === 0) {
    doc.setFontSize(11);
    doc.text('No appointments scheduled for this day.', 20, yPosition);
  } else {
    // Sort by time
    dayAppointments.sort((a, b) => 
      new Date(a.startTime).getTime() - new Date(b.startTime).getTime()
    );
    
    for (const appointment of dayAppointments) {
      const startTime = new Date(appointment.startTime);
      const endTime = new Date(appointment.endTime);
      const timeString = `${startTime.toLocaleTimeString('en-US', { 
        hour: '2-digit', 
        minute: '2-digit',
        hour12: false 
      })} - ${endTime.toLocaleTimeString('en-US', { 
        hour: '2-digit', 
        minute: '2-digit',
        hour12: false 
      })}`;
      
      doc.setFontSize(12);
      doc.setFont('helvetica', 'bold');
      doc.text(timeString, 20, yPosition);
      
      doc.setFont('helvetica', 'normal');
      doc.text(appointment.clientName, 80, yPosition);
      
      yPosition += 8;
      
      doc.setFontSize(10);
      doc.text(`Type: ${appointment.type}`, 25, yPosition);
      doc.text(`Status: ${appointment.status}`, 120, yPosition);
      
      yPosition += 5;
      
      if (appointment.notes) {
        doc.text('Notes:', 25, yPosition);
        yPosition += 4;
        const splitNotes = doc.splitTextToSize(appointment.notes, 160);
        doc.text(splitNotes, 25, yPosition);
        yPosition += splitNotes.length * 4;
      }
      
      if (appointment.attendees) {
        doc.text(`Attendees: ${appointment.attendees}`, 25, yPosition);
        yPosition += 4;
      }
      
      yPosition += 8;
      
      // Line separator between appointments
      doc.setLineWidth(0.2);
      doc.line(20, yPosition, 190, yPosition);
      yPosition += 8;
    }
  }
  
  // Footer
  doc.setFontSize(8);
  doc.text(`Generated by Practice Intelligence - ${new Date().toLocaleString()}`, 20, 285);
  
  // Save the PDF
  const fileName = `daily_schedule_${date.getFullYear()}_${(date.getMonth() + 1).toString().padStart(2, '0')}_${date.getDate().toString().padStart(2, '0')}.pdf`;
  doc.save(fileName);
}